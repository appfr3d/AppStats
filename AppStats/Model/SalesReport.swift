//
//  SalesReport.swift
//  AppStats
//
//  Created by Alfred Lieth Årøe on 03/12/2023.
//

import Foundation
import SwiftCSV

// I wish these were autogenerated, but unfortunetly not since the response from apple is a tarball...
enum SalesReportSales: String {
    case provider = "Provider"
    case providerCountry = "Provider Country"
    case sku = "SKU"
    case developer = "Developer"
    case title = "Title"
    case version = "Version"
    case productTypeIdentifier = "Product Type Identifier"
    case units = "Units"
    case developerProceeds = "Developer Proceeds"
    case beginDate = "Begin Date"
    case endDate = "End Date"
    case customerCurrency = "Customer Currency"
    case countryCode = "Country Code"
    case currencyOfProceeds = "Currency of Proceeds"
    case appleIdentifier = "Apple Identifier"
    case customerPrice = "Customer Price"
    case promoCode = "Promo Code"
    case parentIdentifier = "Parent Identifier"
    case subscription = "Subscription"
    case period = "Period"
    case category = "Category"
    case cmb = "CMB"
    case device = "Device"
    case supportedPlatforms = "Supported Platforms"
    case proceedsReason = "Proceeds Reason"
    case preservedPricing = "Preserved Pricing"
    case client = "Client"
    case orderType = "Order Type"
}

enum SalesReportSubscriptionFields: String, CodingKey {
    case appName = "App Name"
    case appAppleId = "App Apple ID"
    case subscriptionName = "Subscription Name"
    case subscriptionAppleId = "Subscription Apple ID"
    case subscriptionGroupId = "Subscription Group ID"
    case standardSubscriptionDuration = "Standard Subscription Duration"
    case subscriptionOfferName = "Subscription Offer Name"
    case promotionalOfferId = "Promotional Offer ID"
    case customerPrice = "Customer Price"
    case customerCurrency = "Customer Currency"
    case developerProceeds = "Developer Proceeds"
    case proceedsCurrency = "Proceeds Currency"
    case preservedPricing = "Preserved Pricing"
    case proceedsReason = "Proceeds Reason"
    case client = "Client"
    case device = "Device"
    case state = "State"
    case country = "Country"
    case activeStandardPriceSubscriptions = "Active Standard Price Subscriptions"
    case activeFreeTrialIntroductoryOfferSubscriptions = "Active Free Trial Introductory Offer Subscriptions"
    case activePayUpFrontIntroductoryOfferSubscriptions = "Active Pay Up Front Introductory Offer Subscriptions"
    case activePayAsYouGoIntroductoryOfferSubscriptions = "Active Pay As You Go Introductory Offer Subscriptions"
    case freeTrialPromotionalOfferSubscriptions = "Free Trial Promotional Offer Subscriptions"
    case payUpFrontPromotionalOfferSubscriptions = "Pay Up Front Promotional Offer Subscriptions"
    case payAsYouGoPromotionalOfferSubscriptions = "Pay As You Go Promotional Offer Subscriptions"
    case freeTrialOfferCodeSubscriptions = "Free Trial Offer Code Subscriptions"
    case payUpFrontOfferCodeSubscriptions = "Pay Up Front Offer Code Subscriptions"
    case payAsYouGoOfferCodeSubscriptions = "Pay As You Go Offer Code Subscriptions"
    case marketingOptIns = "Marketing Opt-Ins"
    case billingRetry = "Billing Retry"
    case gracePeriod = "Grace Period"
    case subscribers = "Subscribers"
}

func StringDecoder(reportRow: Named.Row, field: SalesReportSubscriptionFields) throws -> String {
    let fieldName = field.rawValue
    guard let stringValue = reportRow[fieldName] else {
        print("Cound not get \(fieldName)")
        throw SalesServiceError.tsvFieldNotFound(fieldName: fieldName)
    }
    return stringValue
}

func IntDecoder(reportRow: Named.Row, field: SalesReportSubscriptionFields) throws -> Int {
    let fieldName = field.rawValue
    guard let stringValue = reportRow[fieldName] else {
        print("Cound not get \(fieldName)")
        throw SalesServiceError.tsvFieldNotFound(fieldName: fieldName)
    }
    
    if let intValue = Int(stringValue) {
        return intValue
    } else {
        print("Could not convert \(fieldName) of value \(stringValue) to Int")
        throw SalesServiceError.tsvFieldNotFound(fieldName: fieldName)
    }
}

func DoubleDecoder(reportRow: Named.Row, field: SalesReportSubscriptionFields) throws -> Double {
    let fieldName = field.rawValue
    guard let stringValue = reportRow[fieldName] else {
        print("Cound not get \(fieldName)")
        throw SalesServiceError.tsvFieldNotFound(fieldName: fieldName)
    }
    
    if let doubleValue = Double(stringValue) {
        return doubleValue
    } else {
        print("Could not convert \(fieldName) of value \(stringValue) to Double")
        throw SalesServiceError.tsvFieldNotFound(fieldName: fieldName)
    }
}

struct SalesReportSubscription: Decodable {
    let appName: String
    let appAppleId: Int
    let subscriptionName: String
    let subscriptionAppleId: Int
    let subscriptionGroupId: Int
    let standardSubscriptionDuration: String
    let subscriptionOfferName: String
    let promotionalOfferId: String
    let customerPrice: Double
    let customerCurrency: String
    let developerProceeds: Double
    let proceedsCurrency: String
    let preservedPricing: String
    let proceedsReason: String
    let client: String
    let device: String
    let state: String
    let country: String
    let activeStandardPriceSubscriptions: Int
    let activeFreeTrialIntroductoryOfferSubscriptions: Int
    let activePayUpFrontIntroductoryOfferSubscriptions: Int
    let activePayAsYouGoIntroductoryOfferSubscriptions: Int
    let freeTrialPromotionalOfferSubscriptions: Int
    let payUpFrontPromotionalOfferSubscriptions: Int
    let payAsYouGoPromotionalOfferSubscriptions: Int
    let freeTrialOfferCodeSubscriptions: Int
    let payUpFrontOfferCodeSubscriptions: Int
    let payAsYouGoOfferCodeSubscriptions: Int
    let marketingOptIns: Int
    let billingRetry: Int
    let gracePeriod: Int
    var subscribers: Double
    
    init(subscribers: Double, country: String, subscriptionName: String) {
        self.appName = ""
        self.appAppleId = 0
        self.subscriptionName = subscriptionName
        self.subscriptionAppleId = 0
        self.subscriptionGroupId = 0
        self.standardSubscriptionDuration = ""
        self.subscriptionOfferName = ""
        self.promotionalOfferId = ""
        self.customerPrice = 0.0
        self.customerCurrency = ""
        self.developerProceeds = 0.0
        self.proceedsCurrency = ""
        self.preservedPricing = ""
        self.proceedsReason = ""
        self.client = ""
        self.device = ""
        self.state = ""
        self.country = country
        self.activeStandardPriceSubscriptions = 0
        self.activeFreeTrialIntroductoryOfferSubscriptions = 0
        self.activePayUpFrontIntroductoryOfferSubscriptions = 0
        self.activePayAsYouGoIntroductoryOfferSubscriptions = 0
        self.freeTrialPromotionalOfferSubscriptions = 0
        self.payUpFrontPromotionalOfferSubscriptions = 0
        self.payAsYouGoPromotionalOfferSubscriptions = 0
        self.freeTrialOfferCodeSubscriptions = 0
        self.payUpFrontOfferCodeSubscriptions = 0
        self.payAsYouGoOfferCodeSubscriptions = 0
        self.marketingOptIns = 0
        self.billingRetry = 0
        self.gracePeriod = 0
        self.subscribers = subscribers
    }
    
    init(reportRow: Named.Row) throws {
        self.appName = try StringDecoder(reportRow: reportRow, field: .appName)
        self.appAppleId = try IntDecoder(reportRow: reportRow, field: .appAppleId)
        self.subscriptionName = try StringDecoder(reportRow: reportRow, field: .subscriptionName)
        self.subscriptionAppleId = try IntDecoder(reportRow: reportRow, field: .subscriptionAppleId)
        self.subscriptionGroupId = try IntDecoder(reportRow: reportRow, field: .subscriptionGroupId)
        self.standardSubscriptionDuration = try StringDecoder(reportRow: reportRow, field: .standardSubscriptionDuration)
        self.subscriptionOfferName = try StringDecoder(reportRow: reportRow, field: .subscriptionOfferName)
        self.promotionalOfferId = try StringDecoder(reportRow: reportRow, field: .promotionalOfferId)
        self.customerPrice = try DoubleDecoder(reportRow: reportRow, field: .customerPrice)
        self.customerCurrency = try StringDecoder(reportRow: reportRow, field: .customerCurrency)
        self.developerProceeds = try DoubleDecoder(reportRow: reportRow, field: .developerProceeds)
        self.proceedsCurrency = try StringDecoder(reportRow: reportRow, field: .proceedsCurrency)
        self.preservedPricing = try StringDecoder(reportRow: reportRow, field: .preservedPricing)
        self.proceedsReason = try StringDecoder(reportRow: reportRow, field: .proceedsReason)
        self.client = try StringDecoder(reportRow: reportRow, field: .client)
        self.device = try StringDecoder(reportRow: reportRow, field: .device)
        self.state = try StringDecoder(reportRow: reportRow, field: .state)
        self.country = try StringDecoder(reportRow: reportRow, field: .country)
        self.activeStandardPriceSubscriptions = try IntDecoder(reportRow: reportRow, field: .activeStandardPriceSubscriptions)
        self.activeFreeTrialIntroductoryOfferSubscriptions = try IntDecoder(reportRow: reportRow, field: .activeFreeTrialIntroductoryOfferSubscriptions)
        self.activePayUpFrontIntroductoryOfferSubscriptions = try IntDecoder(reportRow: reportRow, field: .activePayUpFrontIntroductoryOfferSubscriptions)
        self.activePayAsYouGoIntroductoryOfferSubscriptions = try IntDecoder(reportRow: reportRow, field: .activePayAsYouGoIntroductoryOfferSubscriptions)
        self.freeTrialPromotionalOfferSubscriptions = try IntDecoder(reportRow: reportRow, field: .freeTrialPromotionalOfferSubscriptions)
        self.payUpFrontPromotionalOfferSubscriptions = try IntDecoder(reportRow: reportRow, field: .payUpFrontPromotionalOfferSubscriptions)
        self.payAsYouGoPromotionalOfferSubscriptions = try IntDecoder(reportRow: reportRow, field: .payAsYouGoPromotionalOfferSubscriptions)
        self.freeTrialOfferCodeSubscriptions = try IntDecoder(reportRow: reportRow, field: .freeTrialOfferCodeSubscriptions)
        self.payUpFrontOfferCodeSubscriptions = try IntDecoder(reportRow: reportRow, field: .payUpFrontOfferCodeSubscriptions)
        self.payAsYouGoOfferCodeSubscriptions = try IntDecoder(reportRow: reportRow, field: .payAsYouGoOfferCodeSubscriptions)
        self.marketingOptIns = try IntDecoder(reportRow: reportRow, field: .marketingOptIns)
        self.billingRetry = try IntDecoder(reportRow: reportRow, field: .billingRetry)
        self.gracePeriod = try IntDecoder(reportRow: reportRow, field: .gracePeriod)
        if let subs = try? DoubleDecoder(reportRow: reportRow, field: .subscribers) {
            self.subscribers = subs
        } else {
            self.subscribers = 0
        }
    }
}


    


struct SubscriptionReport: Identifiable {
    var report: SalesReportSubscription
    let date: Date
    var id: String
    
    init(reportRow: Named.Row, date: Date) throws {
        let salesReport = try SalesReportSubscription(reportRow: reportRow)
        self.report = salesReport
        self.date = date
        self.id = date.ISO8601Format() + salesReport.device + salesReport.country + salesReport.subscriptionName
    }
    
    init(report: SalesReportSubscription, date: Date) {
        self.report = report
        self.date = date
        self.id = date.ISO8601Format() + report.device + report.country + report.subscriptionName
    }
}

// Simplified internal state
struct ActiveSubscribers: Identifiable {
    var subscribers: Int
    let date: Date
    let country: String
    let subscriptionName: String
    var id: String { subscriptionName }
}

